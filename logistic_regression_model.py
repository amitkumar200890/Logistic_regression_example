# -*- coding: utf-8 -*-
"""logistic_regression_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WwT0zCNh_50xYYu82twBauqAmHK6EpBn

> **Import the Library**
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""**Import the Data**"""

df = pd.read_csv('/content/cars_purchase_add.csv')
X = df.iloc[:, :-1].values
Y = df.iloc[:, -1].values

"""**Splitt the dataset into train and test**"""

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.25, random_state = 0)

"""** Scale the data**"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""**Training the logistic model on train dataset**"""

from sklearn.linear_model import LogisticRegression
clsfr = LogisticRegression(random_state = 0)
clsfr.fit(X_train, Y_train)

"""**Predict the test set result**"""

Y_pred = clsfr.predict(X_test)
print(Y_pred)

"""**Create the confusion Matrix and Accuracy**"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(Y_test, Y_pred)
print("Confusion Matrix: ")
print(cm)

print("Accuracy value is {}".format(accuracy_score(Y_test, Y_pred)))

"""**Visualising the test set result**"""

from matplotlib.colors import ListedColormap
X_set, y_set = sc.inverse_transform(X_test), Y_test
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),
                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))
plt.contourf(X1, X2, clsfr.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('gray', 'orange')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('gray', 'orange'))(i), label = j)
plt.title('Logistic Regression (Test set)')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend()
plt.show()

